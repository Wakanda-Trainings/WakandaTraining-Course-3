model.Person.events.onInit = function () {				this.firstName = '';				this.lastName = '';				this.streetNumber = 0;				this.streetName = '';			};model.Person.fullName.onGet = function () {				return this.firstName + ' ' + this.lastName;			};model.Person.fullName.onSet = function (value) {				var nameParts = value.split(' ');				if (nameParts.length > 1)				{					this.firstName = nameParts[0];					nameParts.shift();					this.lastName = nameParts.join(' ');				}				else				{					this.firstName = '';					this.lastName = value;				}			};model.Person.fullName.onQuery = function (compOperator, valueToCompare) {				var result = null;				var pieces = valueToCompare.split(' ');	 //break into array				var fname = pieces[0];				var lname = ''; //not sure they provided a full name				if (pieces.length > 1) 	//so check				{					pieces.shift();//get rid of the first element					lname = pieces.join(" "); // last name is all the rest				}				if (lname == '') { 	//only one piece was supplied					if (compOperator == '==') {  	//we'll take to mean special case					   //indicating very broad query						result = '(firstName == "' + fname + '"';						result += ' or lastName == "' + fname + '")';					} 	//if					else  	//we'll take this to mean comparison to lastName						result = 'lastName ' + compOperator + '"' + fname + '"';				}				else { 	//two pieces were supplied					switch (compOperator) {						case '=': 		//since no 'break' runs next case						case '==':						case '===':							result = 'firstName ' + compOperator + '"'+ fname + '"';							result += ' and lastName ' + compOperator +'"'+lname + '"';							break;						case '!=': 	//since no 'break' runs next case						case '!==':								/* could use this but not as fast								result = "(firstName "+ compOperator +"'"+fname+"'";								result += "and lastName "+ compOperator +"'"+lname+"')";								instead use the code below */							result = 'not (';							result += 'firstName '+compOperator.substr(1)+ '"'+fname+'"';							result += 'and lastName '+compOperator.substr(1)+ '"'+lname+'")';							break;						case '>': 		//all 4 handled in the case below						case '>=': 						case '<': 						case '<=': 							var compOper2 = compOperator[0]; // get the first char							result = '(lastName = "' + lname + '" and firstName ' 							result += compOperator + '"' + fname + '")';							result += 'or (lastName ' + compOper2 + '"' + lname+ '")';							break;					}	 //switch				} 	//else				return result;			};model.Person.fullName.onSort = function (ascending) {				if (ascending)					return 'lastName, firstName';				else					return 'lastName desc, firstName desc';			};model.Person.address.onGet = function () {				if ((this.streetNumber != null) & (this.streetNumber > 0))					return this.streetNumber + ' ' + this.streetName;				else					return this.streetName;			};model.Person.address.onSet = function (value) {				var addressParts = value.split(' ');				var numPart = 0;				var namePart = '';				if (addressParts.length > 0)				{					numPart = Number(addressParts[0]);					if ((numPart == null) || (numPart.toString() != addressParts[0])) //so was all digits					{						numPart = 0;						namePart = value;					}					else					{						addressParts.shift();						namePart = addressParts.join(' ');					}				}				this.streetNumber = numPart;				this.streetName = namePart;			};model.Person.address.onQuery = function (compOperator, valueToCompare) {								var result = '';				var addressParts = valueToCompare.split(' ');				var numPart = 0;				var namePart = '';				if (addressParts.length > 0)				{					numPart = Number(addressParts[0]);					if ((numPart == null) || (numPart.toString() != addressParts[0])) //so was all digits					{						numPart = 0;						namePart = valueToCompare;					}					else					{						addressParts.shift();						namePart = addressParts.join(' ');					}				}				if ((numPart != 0) || (namePart.length > 0))				{					if (numPart == 0) //no street number was supplied						result = 'streetName ' + compOperator + '"' + namePart + '"';					else if (namePart.length == 0)						result = 'streetNumber ' + compOperator + '"' + numPart + '"';					else { 	//both street number and name were supplied						switch (compOperator) {							case '==':							case '===':								result = 'streetNumber ' + compOperator + '"' + numPart + '"';								result += ' and streetName ' + compOperator + '"' + namePart + '"';								break;							case '!=': 	//since no 'break' runs next case							case '!==':									/* could use this but not as fast									result = "(firstName "+ compOperator +"'"+fname+"'";									result += "and lastName "+ compOperator +"'"+lname+"')";									instead use the code below */								result = 'not (';								result += 'streetNumber '+compOperator.substr(1) + '"' + numPart + '"';								result += 'and streetName '+compOperator.substr(1) + '"' + namePart + '")';								break;							case '>': 		//all 4 handled in the case below							case '>=': 							case '<': 							case '<=': 								var compOper2 = compOperator[0]; // get the first char								result = '(streetName = "' + namePart + '" and streetNumber ' 								result += compOperator + '"' + numPart + '")';								result += 'or (streetName ' + compOper2 + '"' + namePart + '")';								break;						}	 					} 					}				return result;							};model.Person.address.onSort = function (ascending) {				if (ascending)					return 'streetName, streetNumber';				else					return 'streetName desc, streetNumber desc';			};