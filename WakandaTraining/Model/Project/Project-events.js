model.Project.events.onInit = function () {				this.startDate = new Date();				this.status = 'New';				//this.name = '';				//at this point projectNumber already has				//a sequential unique integer as a string 				var theCount = '0000' + this.projectNumber; //pad with zeroes				theCount = theCount.substr(-5); //last 5 digits				var theYear = this.startDate.getFullYear().toString(); // 4 digit year				var theMonth = (this.startDate.getMonth() + 1).toString(); //month number as string				theMonth = ('0' + theMonth).substr(-2); //pad month with leading zero if needed				this.projectNumber = theYear + theMonth + theCount;//combine year, month + count;							};model.Project.events.onRemove = function () {				var result = {error: 0};				if (this.foldersToProcess.length > 0)				{					result = {error: 501, errorMessage: 'Cannot delete projects with process folders'};				}				else				{					try					{						ds.startTransaction();						this.changes.remove();						ds.commit()					}					catch(e)					{						ds.rollBack();						result = {error: 601, errorMessage: 'Could not delete project changes'};					}				}											return result;			};model.Project.events.onSave = function () {				if (!this.isNew())				{					var changes = getEntityChanges(this);					var changesText = '';					for (var attName in changes)					{						changesText += attName + '\r';						changesText += 'From: ' + changes[attName].from + '\r';						changesText += 'To: ' + changes[attName].to + '\r\r';					}										if (changesText.length > 0)					{						new ds.ProjectChange({							project: this,							changeDate: new Date(),							changedBy: currentUser().name,							changes: changesText						}).save();					}				}							};model.Project.events.onValidate = function () {				var result = {error: 0};				var theErrors = [];								if ((this.name == null) || (this.name.length == 0))					theErrors.push('Project has no name');									if (this.startDate == null)					theErrors.push('Project has no date');								if ((this.status != 'New') && (this.status != 'Active')  && (this.status != 'Inactive'))					theErrors.push('Project has invalid status');					//				if ((this.managerName == null) || (this.managerName.length == 0))//					theErrors.push('Project has no manager name');								if (theErrors.length > 0)					result = {error: 201, errorMessage: theErrors.join('\t')};							return result;							};model.Project.name.events.onSet = function (attributeName) {					this.name = this.name.replace( /(^|\s)([a-z])/g , 						function(m,p1,p2){ return p1+p2.toUpperCase(); } );				};