guidedModel ={	Invoice :	{		events :		{			onValidate:function()			{				var result = {error: 0};				if (!this.isNew())				{					var currSession = currentSession();					if (!currSession.belongsTo('Admin'))					{						var oldEnt = ds.Invoice(this.getKey());						if (oldEnt.postDate != null) //so invoice was already posted							result = {error: 2000, errorMessage: "Invoice is posted and can't be changed."};					}				}				return result;			}		}	},	Transaction :	{		events :		{			onSave:function()			{				var myID = sessionStorage.myID;				if (myID != null)					this.enteredBy = myID;			}		}	},	Employee :	{		methods :		{			addToCart:function(product, quantity)			{				var mySession = currentSession();				var myStorage = mySession.storage; //or sessionStorage;				var myUser = mySession.user; //or currentUser();				var userStorage = myUser.storage;				var myEmployeeID = myStorage.myID;				var me = ds.Employee(myEmployeeID);				myStorage[product] = quantity;				userStorage[product] = quantity;								debugger;															},			makeRaises:function(percent)			{				var all = ds.Employee.all();				all.forEach(function(emp){				   emp.salary += emp.salary * percent;					});							},			getTime:function()			{				return new Date().getTime();			}		},		entityMethods :		{			method1:function()			{				return this.lastName;			}		},		salaryCalc :		{			onSet:function(value)			{				var currSession = currentSession();				if (currSession.belongsTo('Admin'))					this.salary = value;			},			onGet:function()			{				return this.salary;			}		}	},	Review :	{		events :		{			onRestrictingQuery:function()			{				var result = ds.Review.createEntityCollection();				var currSession = currentSession();				if (currSession.belongsTo('Admin'))					result = ds.Review.all();				else				{					var myID = sessionStorage.myID;					if (myID != null)						result = ds.Review.query('employee.ID == :1', myID);				}				return result;			}		}	}};