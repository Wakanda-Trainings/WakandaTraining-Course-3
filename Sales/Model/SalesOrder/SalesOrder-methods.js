(model.SalesOrder.entityMethods.saveNewOrder = function (salesItems) {				var salesItems = salesItems || null; // in case this method was called with no argument				try				{					this.validate(); // run the On Validate event					if (!this.isNew())						throw 107; //not a new sales order					else if (salesItems == null)						throw 108; //no sales items					else if (!Array.isArray(salesItems))						throw 109; //sales items not an array					else if (salesItems.length == 0)						throw 110; //array has no elements					else					{						ds.startTransaction();						try						{							for (index in salesItems)							{								var item = salesItems[index];								if ((item.productID == null) || (item.quantity == null))									throw 111; //incorrect sales item properties								else if (!item.quantity > 0)									throw 112; //no quantity specified								else								{									var theProduct = ds.Product(item.productID);									if (theProduct == null)										throw 113; //no product found for sales item									else										new ds.SalesItem({											salesOrder: this,											quantity: item.quantity,											product: theProduct,											price: theProduct.getCustomerPrice(this)										}).save();								}							}							this.save(); //save the sales order							ds.commit(); //commit the transaction						}						catch (e) //if there is any errors						{							ds.rollBack(); //rollback the transaction							throw e; //re-throw the error						}					}				}				catch (e)				{					throw e; //re-throw the error				}			}).scope = "public";