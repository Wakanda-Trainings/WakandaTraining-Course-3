model.Product.isAssembly.onGet = function () {				return (this.composedOf.length > 0);			};model.Product.isUsed.onGet = function () {				return (this.usedIn.length > 0);			};model.Product.depth.onGet = function () {				if (!this.isAssembly)					return 1;				else					return (this.composedOf.max('productDepth') + 1);			};model.Product.costOfGoods.onGet = function () {				var theCost = 0;				if (this.isAssembly)				{					theCost = Math.round(this.composedOf.sum('extended') * 100) / 100;				}				else				{					theCost = this.buyCost;					}				return theCost;			};model.Product.quantityCanMake.onGet = function () {				var theQuantity = 0;				if (this.isAssembly)					theQuantity = this.composedOf.min('maxCanMake');				return theQuantity;				};model.Product.quantityTotal.onGet = function () {				return this.quantityOnHand + this.quantityCanMake;							};